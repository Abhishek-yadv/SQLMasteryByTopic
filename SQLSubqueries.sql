/*******************************************************/
/******************************************************/
/*****************************************************/
-- During Specify SELF JOIN Must be care of Handling null
/*1. From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'.
 Return ord_no, purch_amt, ord_date, customer_id and salesman_id.*/
-- Create Saample Table
-- Create the Salesman table
CREATE TABLE Salesman (
    salesman_id INT,
    name VARCHAR(255),
    city VARCHAR(255),
    commission DECIMAL(5, 2));
    
-- And Insert
INSERT INTO Salesman (salesman_id, name, city, commission) VALUES
(5001, 'James Hoog', 'New York', 0.15),
(5002, 'Nail Knite', 'Paris', 0.13),
(5005, 'Pit Alex', 'London', 0.11),
(5006, 'Mc Lyon', 'Paris', 0.14),
(5003, 'Lauson Hen', 'San Jose', 0.12),
(5007, 'Paul Adam', 'Rome', 0.13);

-- Order table
CREATE TABLE Orders (
    ord_no INT,
    purch_amt DECIMAL(8, 2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT);
    
-- Insert data
INSERT INTO Orders (ord_no, purch_amt, ord_date, customer_id, salesman_id) VALUES
(70001, 150.5, '2012-10-05', 3005, 5002),
(70009, 270.65, '2012-09-10', 3001, 5005),
(70002, 65.26, '2012-10-05', 3002, 5001),
(70004, 110.5, '2012-08-17', 3009, 5003),
(70007, 948.5, '2012-09-10', 3005, 5002),
(70005, 2400.6, '2012-07-27', 3007, 5001),
(70008, 5760, '2012-09-10', 3002, 5001),
(70010, 1983.43, '2012-10-10', 3004, 5006),
(70003, 2480.4, '2012-10-10', 3009, 5003),
(70012, 250.45, '2012-06-27', 3008, 5002),
(70011, 75.29, '2012-08-17', 3003, 5007),
(70013, 3045.6, '2012-04-25', 3002, 5001);

-- Customer Table
CREATE TABLE Customer (
    customer_id INT,
    cust_name VARCHAR(255),
    city VARCHAR(255),
    grade INT,
    salesman_id INT);

-- Insert data
INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) VALUES
(3002, 'Nick Rimando', 'New York', 100, 5001),
(3005, 'Graham Zusi', 'California', 200, 5002),
(3001, 'Brad Guzan', 'London', 100, 5005),
(3004, 'Fabian Johns', 'Paris', 300, 5006),
(3007, 'Brad Davis', 'New York', 200, 5001),
(3009, 'Geoff Camero', 'Berlin', 100, 5003),
(3008, 'Julian Green', 'London', 300, 5002),
(3003, 'Jozy Altidor', 'Moncow', 200, 5007);

-- 
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders
WHERE salesman_id = (SELECT salesman_id from salesman where name  = 'Paul Adam');

# OR 
SELECT ord_no, purch_amt, ord_date, customer_id, S.salesman_id
FROM Orders O
JOIN Salesman S
	ON O.salesman_id = S.salesman_id
Where name  = 'Paul Adam';

/* 2.Write a SQL query to find all orders generated by London-based salespeople. Return ord_no, purch_amt, ord_date, customer_id, salesman_id. */
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders
WHERE salesman_id = (SELECT salesman_id from salesman where CITY  = 'London');

/* 3.write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007.
 Return ord_no, purch_amt, ord_date, customer_id, salesman_id. */
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders
WHERE salesman_id = (SELECT DISTINCT salesman_id
					from salesman
                    where customer_id = 3007);
                    
/* 4.From the following tables write a SQL query to find the order values greater than the average order value of 10th October 2012.
 Return ord_no, purch_amt, ord_date, customer_id, salesman_id. */
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders
WHERE purch_amt > (SELECT AVG(purch_amt)
					from Orders
                    where ord_date = '2012-09-10');
                    
/* 5. From the following tables, write a SQL query to find all the orders generated in New York city.
 Return ord_no, purch_amt, ord_date, customer_id and salesman_id.*/
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders
WHERE salesman_id = (SELECT salesman_id
					from Salesman
                    where city = 'New York');

/* 6. write a SQL query to determine the commission of the salespeople in Paris.
 Return commission. */
SELECT commission
From Salesman
WHERE salesman_id = (SELECT salesman_id
					from customer
                    where city = 'Paris');
            
/* 7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon. */
SELECT *
From Customer 
WHERE customer_id = (SELECT salesman_id - 2001 
					from salesman
                    where name = 'Mc Lyon');

/* 8. Write a SQL query to count the number of customers with grades above the average in New York City. Return grade and count.*/
SELECT grade, Count(*)
From Customer 
GROUP BY Grade
HAVING(grade) > (SELECT avg(grade)
					from Customer
                    where city = 'New York');

/*9. From the following tables, write a SQL query to find those salespeople who earned the maximum commission.
 Return ord_no, purch_amt, ord_date, and salesman_id.*/
# 1st. 
SELECT ord_no, purch_amt, ord_date, salesman_id
FROM Orders
WHERE salesman_id IN (SELECT salesman_id
					from Salesman
                    where commission = (select max(commission) from Salesman));

# 2nd. 
SELECT O.ord_no, O.purch_amt, O.ord_date, O.salesman_id
FROM Orders O
JOIN (
    SELECT salesman_id
    FROM Salesman
    ORDER BY commission DESC
    LIMIT 1
) AS S_max ON O.salesman_id = S_max.salesman_id;

/* 10. Write SQL query to find the customers who placed orders on 17th August 2012.
 Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name. */
SELECT b.*, a.cust_name
FROM orders b, customer a
WHERE a.customer_id = b.customer_id
AND b.ord_date = '2012-08-17';

-- 
SELECT b.*, a.cust_name
FROM Orders b
LEFT JOIN customer a
	on b.customer_id = a.customer_id
WHERE b.ord_date = '2012-08-17';

/* 11. From the following tables write a SQL query to find salespeople who had more than one customer.
Return salesman_id and name. */
SELECT s.salesman_id, s.name
FROM salesman s, customer c
WHERE c.salesman_id = s.salesman_id
GROUP BY s.salesman_id, s.name
HAVING COUNT(*) > 1;

# 2ND METHOD 
SELECT s.salesman_id, s.name
FROM salesman s
JOIN customer c
ON c.salesman_id = s.salesman_id
GROUP BY s.salesman_id, s.name
HAVING COUNT(*) > 1;

# 3rd method
SELECT s.salesman_id, s.name
FROM salesman s
JOIN customer c
ON c.salesman_id = s.salesman_id
GROUP BY c.salesman_id, s.name
HAVING COUNT(*) > 1;

SELECT s.salesman_id, s.name, c.cust_name, c.customer_id
FROM salesman s
LEFT JOIN customer c
ON c.salesman_id = s.salesman_id;

/* 12.  From the following tables write a SQL query to find those orders, which are higher than the average
 amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. */
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders a
WHERE purch_amt > (
					SELECT AVG(purch_amt) FROM Orders b
                    WHERE b.customer_id = a.customer_id);
                    
/* 13. From the following tables write a SQL query to find those orders that are equal or higher
 than the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. */
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders a
WHERE purch_amt >= (
					SELECT AVG(purch_amt) FROM Orders b
                    WHERE b.customer_id = a.customer_id);
 
/* 14. Write a query to find the sums of the amounts from the orders table, grouped by date,
 and eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date. */
 SELECT ord_date, sum(purch_amt)
 FROM Orders a
 GROUP BY ord_date
 HAVING sum(purch_amt) > (SELECT 1000 + max(purch_amt) from Orders b WHERE a.ord_date = b.ord_date);
 
/* 15.  Write a query to extract all data from the customer table if and only if one or more of the customers
 in the customer table are located in London. Sample table : Customer */
SELECT customer_id, cust_name, city
FROM customer
WHERE EXISTS
   (SELECT *
    FROM customer 
    WHERE city='London');

/* 16. Write a SQL query to find salespeople who deal with multiple customers.
 Return salesman_id, name, city and commission. */
-- 
SELECT s.salesman_id, s.name
FROM Salesman s
JOIN Customer c ON s.salesman_id = c.salesman_id
GROUP BY s.salesman_id, s.name, s.city, s.commission
HAVING COUNT(DISTINCT c.cust_name) > 1;    


# 2nd method
SELECT * 
FROM Salesman
WHERE salesman_id IN (SELECT DISTINCT a.salesman_id
					FROM customer b
					JOIN customer a
					ON b.salesman_id = a.salesman_id 
					AND b.cust_name <> a.cust_name);
-- 2nd method
WITH CTE_Mul_cust AS (
    SELECT salesman_id
    FROM Customer
    GROUP BY salesman_id
    HAVING COUNT(salesman_id) > 1)
SELECT *
FROM Salesman S
RIGHT JOIN CTE_Mul_cust
ON CTE_Mul_cust.salesman_id = S.salesman_id;

# 3rd method
WITH Cust_Dupes AS (
    SELECT DISTINCT salesman_id
    FROM Customer a
    WHERE EXISTS (
        SELECT 1
        FROM Customer b
        WHERE b.salesman_id = a.salesman_id
        AND b.cust_name <> a.cust_name))
SELECT *
FROM Salesman
WHERE salesman_id IN (SELECT salesman_id FROM Cust_Dupes);

      
/* 17. write a SQL query to find salespeople who deal with a single customer.
 Return salesman_id, name, city and commission. */
SELECT s.salesman_id, s.name, s.city, s.commission
FROM Salesman s
JOIN Customer c ON s.salesman_id = c.salesman_id
GROUP BY s.salesman_id, s.name, s.city, s.commission
HAVING COUNT(DISTINCT c.cust_name) = 1;


-- Selecting all columns from the 'salesman' table
SELECT * 
FROM salesman 
WHERE salesman_id IN (
   SELECT DISTINCT salesman_id 
   FROM customer a 
   WHERE NOT EXISTS (
      SELECT * 
      FROM customer b 
      WHERE b.salesman_id = a.salesman_id 
      AND b.cust_name <> a.cust_name));

# 3RD METHOD 
SELECT * 
FROM Salesman
WHERE salesman_id NOT IN (SELECT DISTINCT a.salesman_id
					FROM customer b
					JOIN customer a
					ON b.salesman_id = a.salesman_id 
					AND b.cust_name <> a.cust_name);
                    
/* 18. From the following tables, write a SQL query to find the salespeople
 who deal the customers with more than one order. Return salesman_id, name, city and commission.. */
SELECT S.salesman_id, S.name, S.city, S.commission
FROM Salesman S
JOIN Orders O
	ON S.salesman_id = O.salesman_id
GROUP BY S.salesman_id, S.name, S.city, S.commission
HAVING COUNT(S.salesman_id) > 1;
    
/* 19. From the following tables write a SQL query to find the salespeople
who deal with those customers who live in the same city. Return salesman_id, name, city and commission. */
# 1ST METHOD
SELECT DISTINCT s.salesman_id, s.name, s.city, s.commission
FROM Salesman s
JOIN Customer c ON s.city = c.city;

# 2ND METHOD
SELECT *
FROM salesman 
WHERE city = ANY(SELECT city FROM customer);

#3RS METHOD
SELECT DISTINCT s.salesman_id, s.name, s.city, s.commission
FROM Salesman s
WHERE s.city IN (SELECT DISTINCT city FROM Customer);

/* 20.From the following tables write a SQL query to find salespeople whose place of residence matches 
any city where customers live. Return salesman_id, name, city and commission. */
SELECT DISTINCT s.salesman_id, s.name, s.city, s.commission
FROM Salesman s
WHERE CITY = ANY(SELECT city FROM customer);

# 2ND METHOD
SELECT DISTINCT s.salesman_id, s.name, s.city, s.commission
FROM Salesman s
WHERE CITY IN (SELECT city FROM customer);
 
/* 21. 
  From the following tables write a SQL query to find all those salespeople whose names appear alphabetically
  lower than the customer’s name. Return salesman_id, name, city, commission. */
SELECT *
FROM Salesman S
WHERE EXISTS (SELECT *
				FROM Customer C
				WHERE C.cust_name < S.name);
                
#2nd method
SELECT DISTINCT S.salesman_id, S.name, S.city, S.commission
FROM Salesman S
JOIN Customer C ON C.cust_name < S.name;

/* 22. From the following table write a SQL query to find all those customers with a higher grade than all the customers 
alphabetically below the city of New York. Return customer_id, cust_name, city, grade, salesman_id. */
SELECT *
FROM Customer C
WHERE C.grade > ANY(SELECT C1.grade
							From customer C1
							WHERE C1.CITY < 'New York');

SELECT DISTINCT C1.customer_id, C1.cust_name, C1.city, C1.grade, C1.salesman_id
FROM Customer C1
JOIN (SELECT C1.grade
					FROM Customer C1
					WHERE C1.City < "New York") C2
	ON C1.grade > C2.grade;

/* 23.
Write a SQL query to find all those orders whose order amount exceeds at least one of the orders
 placed on September 10th 2012. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. */
SELECT O1.ord_no, O1.purch_amt, O1.ord_date, O1.customer_id, O1.salesman_id
FROM Orders O1
WHERE O1.purch_amt > Any (SELECT purch_amt
FROM Orders
WHERE ord_date = '2012-09-10');

-- 2nd method
SELECT DISTINCT O1.ord_no, O1.purch_amt, O1.ord_date, O1.customer_id, O1.salesman_id
FROM Orders O1
JOIN (SELECT purch_amt
FROM Orders
WHERE ord_date = '2012-09-10') O2
ON O1.purch_amt > O2.purch_amt;

/* 24.
Write a SQL query to find orders where the order amount is less than the order amount of a customer
 residing in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. */
SELECT distinct o2.ord_no, o2.purch_amt, O2.ord_date, O2.customer_id, O2.salesman_id
FROM Orders O2
JOIN 
(SELECT O.purch_amt
FROM Orders O
WHERE O.customer_id IN
(SELECT C.customer_id
FROM customer C
WHERE C.CITY = 'London')) AS O3
	ON O2.purch_amt < O3.purch_amt;
 
-- 2ND method
SELECT *
FROM orders
WHERE purch_amt < ANY
   (SELECT purch_amt
	FROM orders a, customer b
	WHERE  a.customer_id = b.customer_id
	AND b.city = 'London'); 
 
# 3rd method
SELECT *
FROM orders
WHERE purch_amt < ANY
   (SELECT purch_amt
	FROM orders a
    JOIN customer b
		ON a.customer_id = b.customer_id
	AND b.city = 'London'); 
 
 
/* 25. Write a SQL query to find those orders where every order amount is less than the maximum order
 amount of a customer who lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. */
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders
WHERE purch_amt <
(SELECT MAX(purch_amt)
	FROM orders a
    JOIN customer b
		ON a.customer_id = b.customer_id
	AND b.city = 'London');

-- or
SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM Orders
WHERE purch_amt <
(SELECT MAX(purch_amt)
	FROM orders a, customer b
    WHERE a.customer_id = b.customer_id
	AND b.city = 'London');
 
/* 26. From the following tables write a SQL query to find those customers
 whose grades are higher than those living in New York City. Return customer_id, cust_name, city, grade and salesman_id.. */
SELECT *
FROM Customer
WHERE Grade > All
	(SELECT grade
	FROM Customer
	WHERE city = 'New York');
    
-- 2nd Noteble you must sepecify max in this case of join other wise in city there are other value also that is less than it
SELECT DISTINCT C1.customer_id, C1.cust_name, C1.city, C1.grade, C1.salesman_id
FROM Customer C1
JOIN (SELECT (grade)
	FROM Customer
	WHERE city = 'New York') AS C2
	ON C1.Grade > C2.Grade;
-- Above query still showing inner quey result that is not less than of outer query s0
 
-- 3rd method
SELECT DISTINCT C1.customer_id, C1.cust_name, C1.city, C1.grade, C1.salesman_id
FROM Customer C1
JOIN (SELECT MAX(grade) as max_grade
      FROM Customer
      WHERE city = 'New York') AS C2
ON C1.Grade > C2.max_grade;

-- 4th method
SELECT DISTINCT C1.customer_id, C1.cust_name, C1.city, C1.grade, C1.salesman_id
FROM Customer C1
,(SELECT MAX(grade) as max_grade
      FROM Customer
      WHERE city = 'New York') AS C2
WHERE C1.Grade > C2.max_grade;

/* 27. Write a SQL query to calculate the total order amount generated by a salesperson.
 Salespersons should be from the cities where the customers reside.
 Return salesperson name, city and total order amount. */
# 1st Method
SELECT DISTINCT S2.name, S2.city, SUM(o.purch_amt)
FROM Orders O
JOIN
(SELECT s.*
FROM Salesman S, Customer C
WHERE  S.city = C.city) S2
	ON O.Salesman_id = S2.salesman_id
GROUP BY S2.name, S2.city;

-- 2ND METHOD
SELECT salesman.name, salesman.city, subquery1.total_amt
FROM salesman, 
   (SELECT salesman_id, SUM(orders.purch_amt) AS total_amt
   FROM orders
   GROUP BY salesman_id) subquery1
WHERE subquery1.salesman_id = salesman.salesman_id
AND salesman.city IN (SELECT DISTINCT city FROM customer);

/* 28. From the following tables write a SQL query to find those customers whose grades
 are not the same as those who live in London City. Return customer_id, cust_name, city, grade and salesman_id. */
SELECT *
FROM customer
WHERE grade <> ALL 
   (SELECT grade FROM customer WHERE city='London' AND NOT grade IS NULL);
 
SELECT c1.customer_id, c1.cust_name, c1.city, c1.grade, c1.salesman_id
FROM Customer c1
WHERE NOT EXISTS (
    SELECT 1
    FROM Customer c2
    WHERE c2.city = 'London'
      AND c2.grade = c1.grade)
AND C1.grade IS NOT NULL;
 
 # 2nd method
 SELECT C1.customer_id, C1.cust_name, C1.city, C1.grade,  C1.salesman_id
 FROM Customer C1
 WHERE C1.grade <>
 ALL(SELECT C2.grade
 FROM Customer C2
 WHERE C1.grade = C2.grade AND C2.City = 'London')
AND C1.grade IS NOT NULL;
  
# 3ND METHOD
 SELECT C1.customer_id, C1.cust_name, C1.city, C1.grade,  C1.salesman_id
 FROM Customer C1
 WHERE C1.grade NOT IN  (SELECT C2.grade
 FROM Customer C2
 WHERE C1.grade  = C2.grade  AND C2.City = 'London' AND  C2.grade IS NOT NULL)
 AND  C1.grade IS NOT NULL;
 
/* 29. Write a SQL query to find those customers whose grades are different from those living in Paris.
 Return customer_id, cust_name, city, grade and salesman_id. */
SELECT *
FROM Customer C1
WHERE C1.Grade <> ALL
(SELECT C.Grade
FROM Customer C
WHERE C.City = 'Paris' AND C.grade IS NOT NULL);


/* 30.From the following tables write a SQL query to find all those customers who have different grades than any
 customer who lives in Dallas City. Return customer_id, cust_name,city, grade and salesman_id. */
SELECT *
FROM Customer C1
WHERE C1.Grade <> ALL
(SELECT C.Grade
FROM Customer C
WHERE C.City = 'Dallas');

-- method
SELECT *
FROM Customer C1
WHERE NOT C1.Grade <> ANY
(SELECT C.Grade
FROM Customer C
WHERE C.City = 'Dallas');

/* 31. FROM the table company_mast and item_mast Write a SQL query to calculate the average price of each
 manufacturer's product along with their name. Return Average Price and Company. */
 SELECT AVG(PRO_Price)as average_price, COM_Name
 FROM company_mast, item_mast
 WHERE company_mast.COM_ID = item_mast.PRO_COM
 GROUP BY COM_NAME;
 
 /* 32. From the following tables write a SQL query to calculate the average price of 
 each manufacturer's product of 350 or more. Return Average Price and Company. */
 SELECT COM_NAME, AVG(PRO_PRICE)
 FROM item_mast,company_mast
 WHERE item_mast.PRO_COM = company_mast.COM_ID AND PRO_PRICE >= 350
 GROUP BY COM_NAME;
 
 -- 2nd  method
SELECT AVG(pro_price) AS "Average Price", 
   company_mast.com_name AS "Company"
FROM item_mast, company_mast
WHERE item_mast.pro_com = company_mast.com_id
GROUP BY company_mast.com_name
HAVING AVG(pro_price) >= 350;

 /*33. From the following tables, write a SQL query to find the most expensive
 product of each company. Return Product Name, Price and Company.. */
# 1ST Method
SELECT 
    p.pro_name AS "Product Name",
    p.pro_price AS "Price",
    c.com_name AS "Company"
FROM item_mast p
JOIN company_mast c 
	ON p.pro_com = c.com_id
WHERE p.pro_price = (
        SELECT MAX(im.pro_price)
        FROM item_mast im
        WHERE im.pro_com = c.com_id);


# 2nd method
SELECT P.pro_name AS "Product Name", 
       P.pro_price AS "Price", 
       C.com_name AS "Company"
FROM item_mast P, company_mast C
WHERE P.pro_com = C.com_id
AND P.pro_price =(
       SELECT MAX(P.pro_price)
         FROM item_mast P
         WHERE P.pro_com = C.com_id);

# 3r method
SELECT
    Product_name,
    Product_price,
	Company_name
FROM
    (SELECT
            p.pro_name AS Product_name,
            p.pro_price AS Product_price,
            c.com_name AS Company_name,
            ROW_NUMBER() OVER (PARTITION BY c.com_name ORDER BY p.pro_price DESC) AS rn
        FROM item_mast p
		JOIN company_mast c
			ON p.pro_com = c.com_id) AS subquery
WHERE rn = 1
ORDER BY "Price" DESC;

# 4th method
SELECT 
    p.pro_name AS "Product Name",
    p.pro_price AS "Price",
    c.com_name AS "Company"
FROM item_mast p
JOIN  company_mast c
	ON p.pro_com = c.com_id
WHERE 
    (p.pro_com, p.pro_price) IN (
        SELECT im.pro_com, MAX(im.pro_price)
        FROM item_mast im
        GROUP BY  im.pro_com);

/*
34. Write a SQL query to find employees whose last name is Gabriel or Dosio.
 Return emp_idno, emp_fname, emp_lname and emp_dept.
*/
-- Create table TABLE emp_details
CREATE TABLE emp_details (
    EMP_IDNO INT,
    EMP_FNAME VARCHAR(50),
    EMP_LNAME VARCHAR(50),
    EMP_DEPT INT);

-- Insert data into emp_details
INSERT INTO emp_details (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES
(127323, 'Michale', 'Robbin', 57),
(526689, 'Carlos', 'Snares', 63),
(843795, 'Enric', 'Dosio', 57),
(328717, 'Jhon', 'Snares', 63),
(444527, 'Joseph', 'Dosni', 47),
(659831, 'Zanifer', 'Emily', 47),
(847674, 'Kuleswar', 'Sitaraman', 57),
(748681, 'Henrey', 'Gabriel', 47),
(555935, 'Alex', 'Manuel', 57),
(539569, 'George', 'Mardy', 27),
(733843, 'Mario', 'Saule', 63),
(631548, 'Alan', 'Snappy', 27),
(839139, 'Maria', 'Foster', 57);

SELECT EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT
FROM  emp_details
WHERE EMP_LNAME LIKE '%Gabriel' OR EMP_LNAME LIKE '%Dosio';

SELECT EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT
FROM  emp_details
WHERE EMP_LNAME IN ('Gabriel', 'Dosio');

/* 35. Write a SQL query to find the employees who work in department 89 or 63.
 Return emp_idno, emp_fname, emp_lname and emp_dept. */
SELECT EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT
FROM  emp_details
WHERE EMP_DEPT IN (89, 63);

/* 36. Write a SQL query to find those employees who work for the department
 where the departmental allotment amount is more than Rs. 50000. Return emp_fname and emp_lname. */
- -- Sample table emp_department
CREATE TABLE emp_department (
    DPT_CODE INT,
    DPT_NAME VARCHAR(50),
    DPT_ALLOTMENT INT
);
-- Insert data into emp_department
INSERT INTO emp_department (DPT_CODE, DPT_NAME, DPT_ALLOTMENT) VALUES
(57, 'IT', 65000),
(63, 'Finance', 15000),
(47, 'HR', 240000),
(27, 'RD', 55000),
(89, 'QC', 75000);

SELECT DISTINCT EMP_FNAME, EMP_LNAME
FROM  emp_details E
WHERE EXISTS (SELECT 1
				FROM emp_department E2
				WHERE E2.DPT_CODE = E.EMP_DEPT AND DPT_ALLOTMENT > 50000);
                
# 2nd method
SELECT DISTINCT EMP_FNAME, EMP_LNAME
FROM  emp_details E
JOIN emp_department E2
	ON E2.DPT_CODE = E.EMP_DEPT AND E2.DPT_ALLOTMENT > 50000;
    
# 3RD METHOD
SELECT DISTINCT EMP_FNAME, EMP_LNAME
FROM  emp_details E1
WHERE E1.EMP_DEPT = 
(SELECT E2.DPT_CODE FROM emp_department E2
WHERE E2.DPT_CODE = E1.EMP_DEPT AND E2.DPT_ALLOTMENT > 50000);

# 4th Original Code
SELECT emp_fname, emp_lname 
FROM emp_details
WHERE emp_dept IN
  (SELECT dpt_code 
     FROM emp_department 
       WHERE dpt_allotment > 50000);

/* 37. From the following tables write a SQL query to find the departments whose sanction amount is higher 
than the average sanction amount for all departments. Return dpt_code, dpt_name and dpt_allotment.*/
SELECT *
FROM emp_department
WHERE DPT_ALLOTMENT > (SELECT AVG(DPT_ALLOTMENT)
						FROM emp_department );
                        
/* 38. Write a SQL query to find which departments have more than two employees. Return dpt_name.*/
SELECT E2.dpt_name
FROM emp_details E1, emp_department E2
WHERE E1.EMP_DEPT = E2.DPT_CODE
GROUP BY E2.dpt_name
HAVING COUNT(*) > 2;

SELECT dpt_name FROM emp_department
  WHERE dpt_code IN
  (
    SELECT emp_dept
      FROM emp_details
      GROUP BY emp_dept
      HAVING COUNT(*) > 2);
      
/* 39. 
Write a SQL query to find the departments with the second lowest sanction amount. Return emp_fname and emp_lname..*/
SELECT emp_fname,  emp_lname
FROM emp_details
WHERE emp_dept = 
(SELECT DPT_CODE
FROM emp_department
ORDER BY DPT_ALLOTMENT
LIMIT 1 OFFSET 1);

# 2ND METHOD
WITH CTE AS (SELECT DPT_CODE,
			ROW_NUMBER() OVER (ORDER BY DPT_ALLOTMENT) AS rn
			FROM emp_department)

SELECT emp_fname,  emp_lname
FROM emp_details
WHERE emp_dept = (SELECT DPT_CODE FROM CTE WHERE rn = 2);

#3RD METHOD
-- Selecting columns 'emp_fname' and 'emp_lname' from the 'emp_details' table
SELECT emp_fname, emp_lname 
FROM emp_details 
WHERE emp_dept IN (
  SELECT dpt_code
  FROM emp_department 
  WHERE dpt_allotment = (
    SELECT MIN(dpt_allotment)
    FROM emp_department 
    WHERE dpt_allotment > (
      SELECT MIN(dpt_allotment) 
      FROM emp_department )));
      
